Display the first five rows of the DataFrame and determine which columns to plot
Create a scatter plot of the data in cellphone.

# Explore the data
print(cellphone.head())

# Create a scatter plot of the data from the DataFrame cellphone
plt.scatter(cellphone.x, cellphone.y)

# Add labels
plt.ylabel('Latitude')
plt.xlabel('Longitude')

# Display the plot
plt.show()

Change the color of the points to 'red'.

# Change the marker color to red
plt.scatter(cellphone.x, cellphone.y,
           color="red")

# Add labels
plt.ylabel('Latitude')
plt.xlabel('Longitude')

# Display the plot
plt.show()

Change the marker shape to square.

# Change the marker shape to square
plt.scatter(cellphone.x, cellphone.y,
           color='red',
           marker="s")

# Add labels
plt.ylabel('Latitude')
plt.xlabel('Longitude')

# Display the plot
plt.show()

Change the transparency of the scatterplot to 0.1.

# Change the transparency to 0.1
plt.scatter(cellphone.x, cellphone.y,
           color='red',
           marker='s',
           alpha=0.1)

# Add labels
plt.ylabel('Latitude')
plt.xlabel('Longitude')

# Display the plot
plt.show()

Display the DataFrame hours using a print command.

# Display the DataFrame hours using print
print(hours)

Create a bar chart of the column avg_hours_worked for each officer from the DataFrame hours.

# Display the DataFrame hours using print
print(hours)

# Create a bar plot from the DataFrame hours
plt.bar(hours.officer, hours.avg_hours_worked)

# Display the plot
plt.show()

Use the column std_hours_worked (the standard deviation of the hours worked) to add error bars to the bar chart.

# Display the DataFrame hours using print
print(hours)

# Create a bar plot from the DataFrame hours
plt.bar(hours.officer, hours.avg_hours_worked,
        # Add error bars
        yerr=hours.std_hours_worked)

# Display the plot
plt.show()

Create a bar plot of the time each officer spends on desk_work.
Label that bar plot "Desk Work".

# Plot the number of hours spent on desk work
plt.bar(hours.officer, hours.desk_work, label="Desk Work")

# Display the plot
plt.show()

Create a bar plot for field_work whose bottom is the height of desk_work.
Label the field_work bars as "Field Work" and add a legend.

# Plot the number of hours spent on desk work
plt.bar(hours.officer, hours.desk_work, label='Desk Work')

# Plot the hours spent on field work on top of desk work
plt.bar(hours.officer, hours.field_work, bottom = hours.desk_work, label = "Field Work")

# Add a legend
plt.legend()

# Display the plot
plt.show()

Create a histogram of the column weight from the DataFrame puppies.
Change the number of bins to 50.
Change the range to start at 5 and end at 35.

# Create a histogram of the column weight
# from the DataFrame puppies
plt.hist(puppies.weight)

# Add labels
plt.xlabel('Puppy Weight (lbs)')
plt.ylabel('Number of Puppies')

# Display
plt.show()

Create a histogram of gravel.radius.

# Create a histogram of gravel.radius
plt.hist(gravel.radius)

# Display histogram
plt.show()

Modify the histogram such that the histogram is divided into 40 bins and the range is from 2 to 8.

# Create a histogram
# Range is 2 to 8, with 40 bins
plt.hist(gravel.radius, bins = 40, range = (2,8))

# Display histogram
plt.show()

Normalize your histogram so that the sum of the bins adds to 1.

# Create a histogram
# Normalize to 1
plt.hist(gravel.radius,
         bins=40,
         range=(2, 8),
         density = True)

# Display histogram
plt.show()

Label the x-axis (Gravel Radius (mm)), the y-axis (Frequency), and the title(Sample from Shoeprint).

# Create a histogram
plt.hist(gravel.radius,
         bins=40,
         range=(2, 8),
         density=True)

# Label plot
plt.xlabel('Gravel Radius (mm)')
plt.ylabel('Frequency')
plt.title('Sample from Shoeprint')

# Display histogram
plt.show()
